<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.returnp_web.dao.mapper.MobileMapper">

	<!-- 로그인정보 조회 -->
	<select id="loginAct" parameterType="HashMap" resultType="HashMap">
		SELECT a.memberNo, a.memberName, a.memberEmail, a.memberPassword
		     , a.memberType, a.memberStatus, a.memberAuthType
		     , IFNULL(b.failureCnt,0) as failureCnt
             , c.authNumber, c.lastTime, a.memberPhone
             , NOW() as currentTime
		FROM member a
			 left outer join member_failure b on b.memberNo = a.memberNo
             left outer join auth_number c on c.memberNo = a.memberNo
		WHERE a.memberEmail = #{memberEmail}
		AND a.memberPassword = #{memberPassword}
	</select> 
	
	<!-- 추천인 정보 조회 -->
	<select id="selectRecommend" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{recommend}
		AND memberStatus='1'
	</select> 

	<!-- 사용자 조회 -->
	<select id="selectAuthMember" parameterType="HashMap" resultType="HashMap">
		SELECT a.memberNo, a.memberName, a.memberEmail
            ,  b.authNumber
		FROM member a
         left outer join auth_number b on b.memberNo = a.memberNo
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<!-- 추천인 정보 조회 -->
	<select id="selectRecommendDetail" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberEmail, memberName, memberPassword, memberStatus
		FROM member 
		WHERE memberEmail = #{recommenderEmail}
		AND memberStatus != '6'
		<!-- AND isRecommender='Y' -->
	</select> 
	
	<!-- 중복 이메일 조회 -->
	<select id="selectmemberEmailDup" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<!-- 회원 번호 조회 -->
	<select id="selectmemberNo" parameterType="HashMap" resultType="int">
		SELECT memberNo
		FROM member 
		WHERE memberEmail = #{email}
	</select> 
	
	<!-- 로그인 실패 -->
	<insert id="updateLoginFailure">
		INSERT INTO member_failure(
			memberNo, 
			failureCnt, 
			createTime, 
			updateTime
		) 
		VALUES
		(
			#{memberNo}, 
			#{failureCnt},
			NOW(),
			NOW()
		)
		ON DUPLICATE KEY UPDATE
  			failureCnt = #{failureCnt},
		    updateTime = NOW()

	</insert> 
	
	<!-- 인증번호 생성 -->
	<insert id="updateLoginAuthNumber">
		INSERT INTO auth_number(
			memberNo, 
			authNumber, 
			lastTime,
			createTime 
		) 
		VALUES
		(
			#{memberNo}, 
			#{authNumber},
			NOW() + INTERVAL 30 MINUTE,
			NOW()
		)
 		ON DUPLICATE KEY UPDATE
  			authNumber = #{authNumber},
		    lastTime   = NOW() + INTERVAL 30 MINUTE,
		    createTime = NOW()

	</insert> 	
	
		<!-- 인증번호 삭제 -->
	<insert id="loginAuthNumberDelete">
		DELETE FROM auth_number WHERE memberNo = #{memberNo} ; 
	</insert> 

	<!-- 마이페이지 회원정보 조회 -->
	<select id="selectMypageMyinfo" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, country, A.createTime, recommenderNo, DATE_FORMAT(A.createtime, '%Y-%m-%d') as createTime2, iso, orgName, krName, enName
		FROM member  as A
		left outer join country as B on A.country = B.iso
		WHERE memberNo = #{memberNo}
	</select> 
	
	<!-- 회원탈퇴 정보 조회 -->
	<select id="selectMyinfoCheck" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member  
		WHERE memberNo = #{memberNo}
		AND memberEmail = #{memberEmail}
	</select> 
	
	<!-- 추천인 조회 -->
	<select id="recommenderNo" parameterType="HashMap" resultType="String">
		SELECT memberEmail
		FROM member 
		WHERE memberNo = #{recommenderNo}
	</select> 
	
	<!-- 회원가입  이메일 인증 임시적으로 패스하기 위해서 memberStatus = 1 로 대입-->
	<insert id="insertJoinAct" parameterType="HashMap">
		INSERT INTO member (
			memberName,
			memberEmail,
			memberPassword,
			memberStatus,    
			memberPhone,
			recommenderNo,
			<!-- isTerms,
			isPrivacy,
			isSpam, -->		
			regType,
			createTime,
			updateTime,
			joinRoute,
			country
		) VALUES (
			#{name},
			#{email},
			#{pwd},
			'1',
			#{phone},
			#{recommenderNo},
			<!-- #{terms},
			#{privacy},
			#{spam}, -->		
			'U',   
			NOW(),
			NOW(),
			#{joinRoute},	
			#{country}
				
		)
	</insert> 
	
	<!-- 회원가입 Green point default-->
	<insert id="insertGreenAct" parameterType="HashMap">
		INSERT INTO green_point (
			memberNo,
			nodeType,
			nodeTypeName,
			pointAmount,    
			greenPointCreateTime,
			greenPointUpdateTime,
			nodeNo
		) VALUES (
			#{memberNo},
			#{nodeType},
			#{nodeTypeName},
			0,
			NOW(),
			NOW(),
			#{nodeNo}
		)
	</insert> 
	
	<!-- 회원가입 Red point default-->
	<insert id="insertRedAct" parameterType="HashMap">
		INSERT INTO red_point (
			memberNo,
			pointAmount,
			redPointCreateTime,
			redPointUpdateTime
		) VALUES (
			#{memberNo},
			'0',
			NOW(),
			NOW()		
		)
	</insert> 
	
	<update id="updateUser" parameterType="HashMap" >
	UPDATE member
		<set>
		<if test="memberPassword !=null and memberPassword !='' ">
			memberPassword=#{memberPassword},
		</if>
		<if test="recommenderNo !=null and recommenderNo !='' ">
			recommenderNo=#{recommenderNo},
		</if>
		<if test="memberPhone !=null and memberPhone !='' ">
			memberPhone=#{memberPhone},
		</if>
		<if test="country !=null and country !='' ">
			country=#{country},
		</if>
			updateTime=NOW()
		</set>
		<where>
			AND memberNo= #{memberNo}
		</where>		 
	</update>
	
	
	<update id="updateUserMemberStatus" parameterType="HashMap" >
	UPDATE member
		<set>
		memberStatus='1',
		updateTime=NOW()
		</set>
		<where>
			AND memberEmail= #{memberEmail}
		</where>		 
	</update>
	
	<!-- 중복 이메일 조회 -->
	<select id="selectEmailSignSuccessCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
		AND memberStatus ='1'
	</select> 
	
	<!-- 임시비밀번호 업데이트 -->
	<insert id="updateTempPw" parameterType="HashMap" >
		UPDATE member
		   SET memberPassword = #{tempPassword}
		 WHERE memberNo = #{memberNo}   
	</insert> 
	
	<!-- 이메일 조회 -->
	<select id="selectFindEmailAct" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member 
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<!-- 이메일 조회 -->
	<select id="selectFindUserEmailAct" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member 
		WHERE memberName = #{memberName}
		AND memberPhone = #{memberPhone}
	</select> 
	
	<!-- 회원 중복 가입 조회 -->
	<select id="selectMemberJoinCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
	</select>
	
	<!-- 회원 휴대폰 중복 가입 조회 -->
	<select id="selectMemberPhoneOverlapCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberPhone LIKE CONCAT('%',#{memberPhone},'%')
	</select>
	
	<!-- 로그인 실패 -->
	<insert id="deleteLoginFailure">
		DELETE 
		FROM member_failure
		WHERE memberNo = #{memberNo}
	</insert>
	
	<!-- 회원 탈퇴 -->
	<insert id="memberOutAct">
		UPDATE member
		   SET memberStatus = #{memberStatus}
		     , updateTime   = NOW()
		 WHERE memberNo = #{memberNo}
	</insert>
	
	<select id="selectCompanyBankList" parameterType="HashMap" resultType="HashMap">
		SELECT companyBankAccountNo, bankName, bankOwnerName, bankAccount
		FROM company_bank_account
	</select> 

	<select id="selectMyMemberListCount" parameterType="HashMap" resultType="int">
		SELECT count(*) FROM member  where recommenderNo = #{memberNo}
	</select> 
	
	<select id="selectMyMemberList" parameterType="HashMap" resultType="HashMap">
		SELECT * FROM member  where recommenderNo = #{memberNo}
	</select> 
	
	<select id="selectCompanyBankAccount" parameterType="HashMap" resultType="HashMap">
		SELECT companyBankAccountNo, bankName, bankOwnerName, bankAccount
		FROM company_bank_account
		WHERE companyBankAccountNo = #{BankAccountNo}
	</select> 
	
	<select id="selectPolicyMembershipTransLimit" parameterType="HashMap" resultType="HashMap">
		SELECT 
				policyNo,
				regAdminNo,
				soleDistComm,
				branchComm,
				agancyComm,
				affiliateComm,
				branchRecComm,
				agancyRecComm,
				affiliateRecComm,
				customerRecCom,
				customerComm,
				pointTransRate,
				pointTransLimit,
				redPointAccRate,
				membershipTransLimit,
				gPointMovingMinLimit,
				gPointMovingMaxLimit,
				rPointMovingMinLimit,
				rPointMovingMaxLimit,
				customerRecManagerComm,
				affiliateRecManagerComm,
				agancyRecManagerComm,
				branchRecManagerComm,
				rPayWithdrawalMinLimit,
				rPayWithdrawalMaxLimit,
				createTime
		FROM policy
		ORDER BY
   		policyNo DESC
		LIMIT 1 
	</select> 
	
	<!-- 정회원 신청 -->
	<insert id="insertMembershipRequest" parameterType="HashMap">
		INSERT INTO membership_request (
			<!-- membershipRequestNo, -->
			memberNo,
			companyBankAccountNo,
			paymentAmount,    
			paymentStatus,
			paymentType,
			regType,
			updateTime,
			createTime,
			depositor
			) VALUES (
			#{memberNo},
			#{companyBankAccountNo},
			#{paymentAmount},
			'1',
			'1',
			'U',
			NOW(),
			NOW(),
			#{memberName}			
		)
	</insert> 
	
	<!-- 마이페이지 유효성 조회 -->
	<select id="selectMypageMyinfoValidity" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member 
		WHERE memberNo = #{memberNo}
	</select> 
	
	<!-- 추천인 조회 -->
	<select id="selectMemberShipReq" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM membership_request 
		WHERE memberNo = #{memberNo}
	</select>
	
	
	<!-- 회원정보 조회(email) -->
	<select id="selectUserInfoUseEmail" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberPassword, memberPhone
		     , memberType, memberStatus, memberAuthType, createTime, recommenderNo
		FROM member
		WHERE memberEmail = #{memberEmail}
	</select> 
	
	<select id="selectPointConversionTransaction" parameterType="HashMap" resultType="HashMap">
		SELECT pointConvertRequestNo
		FROM point_convert_request
		WHERE memberNo =#{memberNo}
		AND nodeType=#{nodeType}
		ORDER BY pointConvertRequestNo DESC
		LIMIT 1 
	</select> 
	
	<!-- 몰 정책 조회 -->
	<select id="selectPolicyPointTranslimit" parameterType="HashMap" resultType="HashMap">
		SELECT policyNo,
				regAdminNo,
				soleDistComm,
				branchComm,
				agancyComm,
				affiliateComm,
				branchRecComm,
				agancyRecComm,
				affiliateRecComm,
				customerRecCom,
				customerComm,
				pointTransRate,
				pointTransLimit,
				redPointAccRate,
				membershipTransLimit,
				gPointMovingMinLimit,
				gPointMovingMaxLimit,
				rPointMovingMinLimit,
				rPointMovingMaxLimit,
				customerRecManagerComm,
				affiliateRecManagerComm,
				agancyRecManagerComm,
				rPayWithdrawalMinLimit,
				rPayWithdrawalMaxLimit,
				branchRecManagerComm,
				createTime
		FROM policy
		ORDER BY
   		policyNo DESC
		LIMIT 1 
	</select> 

	<!-- 회원 가입 여부 조회 -->
	<select id="selectMemberInfo" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberEmail = #{memberEmail}
		AND memberNo != #{memberNo}
		AND memberStatus != '6'
	</select>
	
	<!-- red point 조회 -->
	<select id="selectMyRedPointMapinfo" parameterType="HashMap" resultType="HashMap">
		SELECT redPointNo, memberNo, pointAmount, redPointCreateTime, redPointUpdateTime
		FROM red_point  
		WHERE memberNo = #{memberNo}
	</select> 
	
	<!-- red point 선물받을 회원 정보 조회 -->
	<select id="selectRecipientMemberinfo" parameterType="HashMap" resultType="HashMap">
		SELECT memberNo, memberName, memberEmail, memberStatus, memberAuthType, memberPhone
		FROM member  
		WHERE memberEmail = #{memberEmail}
	</select>
	
	<!-- 추천인 조회 -->
	<select id="selectYearMonth" parameterType="HashMap" resultType="HashMap">
		SELECT left(DATE_SUB(  #{TIME},  INTERVAL 1 month  ) ,7) AS PREWMONTH 
				,left(  #{TIME},  7) AS NOWMONTH
				,left(DATE_SUB(  #{TIME},  INTERVAL -1 month  ) ,7) AS NEXTMONTH 
		FROM DUAL
	</select> 
	
	<!-- my green point 조회 -->
	<select id="selectMygreenPointInfo" parameterType="HashMap" resultType="HashMap">
		SELECT 
				greenPointNo
				,memberNo
				,nodeNo
				,nodeType
				,nodeTypeName
				,pointAmount
				,greenPointCreateTime
		FROM green_point
		WHERE memberNo = #{memberNo}
		AND nodeType = #{nodeType}
	</select> 
	
	<!-- member_auth_token 조회 -->
	<select id="selectMemberAuthToken" parameterType="HashMap" resultType="HashMap">
		SELECT 
				memberAuthTokenNo
				,memberNo
				,memberEmail
				,userAuthToken
				,createTime
				,updateTime
				,memberPhone
		FROM member_auth_token
		WHERE userAuthToken = #{userAuthToken}
		ORDER BY
   		memberAuthTokenNo DESC
		LIMIT 1 
	</select> 
	
		<!-- 국가 코드 조회 -->
	<select id="selectCountries" parameterType="HashMap" resultType="HashMap">
		SELECT *
		FROM country
		WHERE useStatus = #{useStatus}
		ORDER BY
   		enName ASC
	</select> 
	
	<!-- 언어 코드 조회 -->
	<select id="selectLanguages" parameterType="HashMap" resultType="HashMap">
		SELECT *
		FROM language
		WHERE useStatus = #{useStatus}
		ORDER BY
   		languageEnName ASC
	</select> 
	
	
	<select id="getMemberAuthToken" parameterType="HashMap" resultType="HashMap">
		SELECT 
				memberAuthTokenNo
				,memberNo
				,memberEmail
				,userAuthToken
				,createTime
				,updateTime
				,memberPhone
		FROM member_auth_token
		WHERE 1 = 1
		<if test="memberAuthTokenNo != null "> AND memberAuthTokenNo = #{memberAuthTokenNo} </if>
        <if test="memberNo !=null"> AND memberNo =  #{memberNo} </if>
        <if test="memberEmail != null"> AND memberEmail =  #{memberEmail} </if>
        <if test="userAuthToken != null"> AND userAuthToken = #{userAuthToken}</if>
	</select> 
	
	<!-- member_auth_token 저장 -->
	<insert id="insertMemberAuthTokenAct" parameterType="HashMap">
		INSERT INTO member_auth_token(
			<!-- memberAuthTokenNo, -->
			memberNo,
			memberEmail,
			userAuthToken,
			createTime,
			updateTime,
			memberPhone
		)VALUES(
			#{memberNo},
			#{memberEmail},
			#{userAuthToken},
			NOW(),
			NOW(),
			#{memberPhone}	
		)
		ON DUPLICATE KEY UPDATE
  			userAuthToken = #{userAuthToken},
		    updateTime = NOW()
	</insert> 
	
	<!-- 로그인 실패 -->
	<insert id="deleteMemberAuthToken">
		DELETE 
		FROM member_auth_token
		WHERE memberNo = #{memberNo}
	</insert>
	
	<!-- qr코드 회원가입시에 휴대폰번호로 가입유무 확인 -->
	<select id="selectqrMemberPhone" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM member 
		WHERE memberPhone = #{memberPhone}
	</select> 
	
	<!-- 로그인정보 조회 -->
	<select id="loginAppAct" parameterType="HashMap" resultType="HashMap">
		SELECT a.memberNo, a.memberName, a.memberEmail, a.memberPassword
		     , a.memberType, a.memberStatus, a.memberAuthType
		     , IFNULL(b.failureCnt,0) as failureCnt
             , c.authNumber, c.lastTime, a.memberPhone
             , NOW() as currentTime
		FROM member a
			 left outer join member_failure b on b.memberNo = a.memberNo
             left outer join auth_number c on c.memberNo = a.memberNo
		WHERE a.memberEmail = #{memberEmail}
	</select> 
	
	<!-- 가맹점 정보 조회 -->
	<select id="selectAffiliateInfo" parameterType="HashMap" resultType="HashMap">
		SELECT affiliateNo
				,affiliateSerial
				,affiliateCode
				,affiliateName
		FROM affiliate
		WHERE affiliateSerial= #{af_id} 
	</select> 
	
	<!-- 회원 휴대폰 중복 가입 조회(회원정보수정) -->
	<select id="selectMemberPhoneOverlapModfiyCount" parameterType="HashMap" resultType="int">
		SELECT count(*) 
		FROM member 
		WHERE memberPhone = #{memberPhone}
		AND memberNo != #{memberNo}
	</select>
	
	<!-- 마이페이지 정회원 신청정보 조회 -->
	<select id="selectMembershipRequestPaymentStatus" parameterType="HashMap" resultType="HashMap">
		SELECT 	memberNo
				,depositor
				,paymentType
				,paymentStatus
				,createTime
		FROM membership_request  
		WHERE memberNo = #{memberNo}
	</select> 
	
	<update id="updatePaymentStatusRequestCon" parameterType="HashMap" >
		UPDATE membership_request
		SET paymentStatus ='6'
		WHERE memberNo = #{memberNo}
		AND paymentStatus ='1'
	</update>
	
	<!-- 마이페이지 회원정보 회원타입 조회 -->
	<!--    1-일반회원 member
			2.정회원 recommender
			3. 지사 branch
			4. 대리점 agency
			5. 협력업체 affiliate
			6. 관리자 saleManager
			7. 총판 SoleDist -->
	<select id="selectmemberTypeInfo" parameterType="HashMap" resultType="HashMap">
	   SELECT
				memberNo
 				,(SELECT recommenderNo FROM recommender WHERE  memberNo = #{memberNo}) as  recommenderNo
				,(SELECT branchNo FROM branch WHERE  memberNo = #{memberNo} ) as  branchNo
				,(SELECT agencyNo FROM agency WHERE  memberNo = #{memberNo} ) as  agencyNo
				,(SELECT affiliateNo FROM affiliate WHERE  memberNo = #{memberNo} ) as  affiliateNo
				,(SELECT saleManagerNo FROM sale_manager WHERE  memberNo = #{memberNo} ) as  saleManagerNo 
				,(SELECT soleDistNo FROM sole_dist WHERE  memberNo = #{memberNo} ) as  soleDistNo
		FROM member
		WHERE memberNo = #{memberNo}
	</select>
	
	<!-- 게시글 쓰기 -->
	<insert id="insertQnaWAct" parameterType="HashMap">
		INSERT INTO board (
				boardType
				,boardName
				,boardTitle
				,boardContent
				,boardWriterNo
				,boardWriterName
				,boardWriterEmail
				,boardWriterType
				,viewHitCount
				,isPublic
				,boardPid
				,boardRef
				<!-- ,boardRef 답글 , 댓글의 원래 게시글 NOT NULL?? mobile에서는 의미가 없는 값같아요. 회신이 없으셔서 우선은 0을 넣었습니다.-->
				,boardLevel
				,boardCate
				,createTime
				,updateTime
		) VALUES (
			'3'
			,#{boardName}
			,#{boardTitle}
			,#{boardContent}
			,#{memberNo}
			,#{memberName}
			,#{memberEmail}
			,'U'
			,'0'
			,'Y'
			,'0'
			,'0' <!-- boardRef -->
			,'1' 
			,#{boardCate}
			,NOW()
			,NOW()		
		)
	</insert>

	<!-- 제휴상담 글쓰기 -->
	<insert id="insertQnaNodeWAct" parameterType="HashMap">
		INSERT INTO board (
				boardType
				,boardName
				,boardTitle
				,boardContent
				,boardWriterNo
				,boardWriterName
				,boardWriterEmail
				,boardWriterType
				,viewHitCount
				,isPublic
				,boardPid
				,boardRef
				<!-- ,boardRef 답글 , 댓글의 원래 게시글 NOT NULL?? mobile에서는 의미가 없는 값같아요. 회신이 없으셔서 우선은 0을 넣었습니다.-->
				,boardLevel
				,boardCate
				,createTime
				,updateTime
				,rerv1
				,rerv2
				,rerv3
				,rerv4
				,rerv5
				,rerv6
				,rerv7
		) VALUES (
			'4'
			,#{boardName}
			,#{boardTitle}
			,#{boardContent}
			,#{memberNo}
			,#{memberName}
			,#{memberEmail}
			,'U'
			,'0'
			,'Y'
			,'0'
			,'0' <!-- boardRef -->
			,'1' 
			,#{boardCate}
			,NOW()
			,NOW()
			,#{rerv1}
			,#{rerv2}
			,#{rerv3}
			,#{rerv4}
			,#{rerv5}
			,#{rerv6}
			,#{rerv7}		
		)
	</insert>	 
	
	<!-- 회원 은행 계좌 리스트 가져오기 -->
	<select id="selectBankAccounts" parameterType="HashMap" resultType="HashMap">
		SELECT *
		FROM member_bank_account 
		WHERE 1 = 1
		 <if test="memberNo != null  and  memberNo  != 0"> AND memberNo = #{memberNo} </if>
      <if test="memberBankAccountNo != null  and  memberBankAccountNo  != 0"> AND memberBankAccountNo =  #{memberBankAccountNo} </if>
	</select>
	
	<!-- 회원 은행 계좌 삭제-->
	<delete id="deleteMemberBankAccount" parameterType="HashMap" >
		delete from member_bank_account where memberBankAccountNo = #{memberBankAccountNo}
	</delete>
	
	<insert id="insertMemberBankAccount" parameterType="HashMap">
		INSERT INTO member_bank_account (
				memberNo
				,bankName
				,accountOwner
				,bankAccount
				,accountStatus
				,statusMessage
				,regAdminNo
				,regType
				,createTime
				,updateTime
		) VALUES (
				#{memberNo}
				,#{bankName}
				,#{accountOwner}
				,#{bankAccount}
				,#{accountStatus}
				,#{statusMessage}
				,#{regAdminNo}
				,#{regType}
				,NOW()
				,NOW()	
		)
	</insert>	 

	<update id="updateMemberBankAccount" parameterType="HashMap" >
		UPDATE member_bank_account
		<set>
			<if test="bankName !=null and bankName !='' ">
				bankName=#{bankName},
			</if>
			<if test="accountOwner !=null and accountOwner !='' ">
				accountOwner=#{accountOwner},
			</if>
			<if test="bankAccount !=null and bankAccount !='' ">
				bankAccount=#{bankAccount},
			</if>
				updateTime=NOW()
		</set>
		<where>
			AND memberBankAccountNo= #{memberBankAccountNo}
		</where>		 
	</update>
	
	<insert id="insertPointWithdrawal" parameterType="HashMap">
		INSERT INTO point_withdrawal(
				memberNo
				,memberBankAccountNo
				,withdrawalAmount
				,withdrawalStatus
				,withdrawalPointType
				,withdrawalMessage
				,regType
				,regAdminNo
				,createTime
				,updateTime
		) VALUES (
				#{memberNo}
				,#{memberBankAccountNo}
				,#{withdrawalAmount}
				,'1'
				,'R'
				,#{statusMessage}
				,'U'
				,0
				,NOW()
				,NOW()	
		)
	</insert>	
	
	<update id="updatePointwithdrawal" parameterType="HashMap" >
		UPDATE point_withdrawal
		<set>
			<if test="memberNo !=null and memberNo !='' ">
				memberNo=#{memberNo},
			</if>
			<if test="memberBankAccountNo !=null and memberBankAccountNo !='' ">
				memberBankAccountNo=#{memberBankAccountNo},
			</if>
			<if test="withdrawalAmount !=null and withdrawalAmount !='' ">
				withdrawalAmount=#{withdrawalAmount},
			</if>
			<if test="withdrawalStatus !=null and withdrawalStatus !='' ">
				withdrawalStatus=#{withdrawalStatus},
			</if>
			<if test="withdrawalPointType !=null and withdrawalPointType !='' ">
				withdrawalPointType=#{withdrawalPointType},
			</if>
			<if test="withdrawalMessage !=null and withdrawalMessage !='' ">
				withdrawalMessage=#{withdrawalMessage},
			</if>
				updateTime=NOW()
		</set>
		<where>
			AND pointWithdrawalNo= #{pointWithdrawalNo}
		</where>		 
	</update>
	
	<update id="updateRedPoint" parameterType="HashMap" >
		update red_point	
		set pointAmount=#{pointAmount}
		where redPointNo= #{redPointNo}
	</update>
	
		<!-- 회원 포인트 출금 요청 리스트 가져오기-->
	<select id="selectPointwithdrawals" parameterType="HashMap" resultType="HashMap">
		SELECT 
		    PW.pointWithdrawalNo, 
		    PW.memberNo, 
		    PW.memberBankAccountNo, 
		    PW.withdrawalAmount, 
			PW.withdrawalStatus,
		    CASE
			    WHEN PW.withdrawalStatus = 1 THEN "출금 처리중"
			    WHEN PW.withdrawalStatus = 2 THEN "출금 완료"
			    WHEN PW.withdrawalStatus = 3 THEN "출금 보류"
			    WHEN PW.withdrawalStatus = 4 THEN "출금 취소"
			    WHEN PW.withdrawalStatus = 5 THEN "관리자 취소"
			END as withdrawalStatusText,
		    PW.withdrawalPointType, 
		    PW.regAdminNo, 
		    PW.regType, 
		    M.memberName, 
		    M.memberEmail, 
		    M.memberPhone, 
		    MBA.bankName, 
		    MBA.accountOwner, 
		    MBA.bankAccount, 
		    PW.createTime, 
		    PW.updateTime
  		from point_withdrawal as PW
    	inner join member as M  on (PW.memberNo = M.memberNo)
    	inner join member_bank_account as MBA  on (PW.memberBankAccountNo = MBA.memberBankAccountNo)
   		where 
    		PW.memberNo = #{memberNo}
    	ORDER by createTime DESC
	</select>
	
		<!-- 오늘 날짜의 출금 신청 총 금액 가져오기-->
	<select id="selectWithdrawalSumPerDay" parameterType="HashMap" resultType="int">
		SELECT COALESCE(sum(withdrawalAmount), 0)
		FROM point_withdrawal 
		WHERE memberNo = #{memberNo} 
		AND createTime > date_format(curdate( ), '%Y-%m-%d %H:%i:%s' )
		AND (withdrawalStatus='1' OR withdrawalStatus='2')
	</select> 
	
	<!--핀넘버 조회에 의한 상품권 발행 정보 가져오기-->
	<select id="selectGiftCardIssue" parameterType="HashMap" resultType="HashMap">
		SELECT *
		FROM  gift_card_issue
			<!-- #{tableName} -->
		WHERE 	pinNumber = #{pinNumber}
	</select> 
	
	<!-- 회원 설정 가져오기 -->
	<select id="selectMemberConfig" parameterType="HashMap" resultType="HashMap">
		SELECT *
		FROM member_config
		WHERE 	memberNo = #{memberNo}
	</select> 

	<!-- 회원 설정 인서트 -->
	<insert id="insertMemberConfigl" parameterType="HashMap" >
		INSERT INTO member_config (memberNo, devicePush, emailReceive, createTime, updateTime) values(#{memberNo},#{devicePush} ,#{emailReceive} ,NOW(), NOW())
	</insert> 

	<!-- 회원 설정 업데이트 -->
	<update id="updateMemberConfig" parameterType="HashMap" >
	UPDATE member_config
		<set>
			<if test="devicePush !=null">
				devicePush=#{devicePush},
			</if>
			<if test="emailReceive !=null">
				emailReceive=#{emailReceive},
			</if>
			updateTime=NOW()
		</set>
		<where>
			AND memberNo= #{memberNo}
		</where>		 
	</update>
	
		<!-- 가맹점 tid 조회-->
	<select id="selectAffiliateTid" parameterType="HashMap" resultType="HashMap">
		SELECT *
		FROM affiliate_tid
		WHERE 
		1 =1 
		<if test="affiliateTidNo != null "> AND affiliateTidNo = #{affiliateTidNo} </if>
      	<if test="memberNo != null"> AND memberNo =  #{memberNo} </if>
      	<if test="affiliateNo != null"> AND affiliateNo =  #{affiliateNo} </if>
      	<if test="tid != null"> AND tid =  #{tid} </if>
	</select> 
	
		<!--조인을 통한 가맹점 정보 조회 -->
	<select id="selectAffiliateCommand" parameterType="HashMap" resultType="HashMap">
	 select
    AF.affiliateNo, 
	APR.paymentRouterNo, 
    (SELECT A.paymentRouterType from payment_router as A WHERE paymentRouterNo = APR.paymentRouterNo) as paymentRouterType,
    (SELECT B.paymentRouterName from payment_router as B WHERE paymentRouterNo = APR.paymentRouterNo) as paymentRouterName,
    (SELECT C.paymentRouterCode  from payment_router as C WHERE paymentRouterNo = APR.paymentRouterNo) as paymentRouterCode,
    AT.tid as affiliateSerial, 
    AF.affiliateCode, 
    AF.affiliateName, 
    AF.affiliateAddress, 
    AF.affiliateTel, 
    AF.affiliatePhone, 
    AF.affiliateType,
    AF.affiliateComm,
    AF.giftCardPayRefundRate,
    AF.memberNo, 
    AF.agencyNo, 
    AF.recommenderNo, 
    AF.affiliateStatus,
    AF.regType, 
    AF.regAdminNo, 
    AF.affiliateEmail, 
    AF.greenPointAccStatus, 
    AF.redPointAccStatus, 
    AF.greenPointUseStatus, 
    AF.redPointUseStatus, 
    AF.createTime, 
    AF.updateTime,
  	M.memberEmail as memberEmail, 
    M.memberName as memberName, 
    M.memberPhone as memberPhone, 
    GP.pointAmount as greenPointAmount, 
    RP.pointAmount as redPointAmount,
    MA.memberAddressNo, 
    MA.memberNo, 
    MA.nodeNo, 
    MA.nodeType, 
    MA.roadFullAddr, 
    MA.roadAddrPart1, 
    MA.roadAddrPart2, 
    MA.addrDetail, 
    MA.engAddr, 
    MA.jibunAddr, 
    MA.zipNo, 
    MA.admCd, 
    MA.rnMgtSn, 
    MA.bdMgtSn, 
    MA.lat, 
    MA.lng,
    M2.memberName as recommenderName,
    AG.agencyName
	from affiliate as AF  
    inner join member as M on (AF.memberNo = M.memberNo)
    inner join red_point as RP on (AF.memberNo = RP.memberNo)
    inner join green_point as GP on (AF.memberNo = GP.memberNo AND GP.nodeType ='5' )    
    left outer join member_address as MA on (AF.affiliateNo = MA.nodeNo AND MA.nodeType ='5' )
    left outer join member as M2 on (AF.recommenderNo = M2.memberNo)
    left outer join agency as AG on (AF.agencyNo= AG.agencyNo)
    inner join affiliate_tid AT on (AF.affiliateNo = AT.affiliateNo)
    left outer join affiliate_payment_router as APR on (AF.affiliateNo= APR.affiliateNo)
    where 
    1 = 1
       <if test="affiliateNo != null">AND AF.affiliateNo = #{affiliateNo,jdbcType=INTEGER} </if>
      <if test="memberNo != null">AND memberNo = #{memberNo,jdbcType=INTEGER} </if>
      <if test="agencyNo != null">AND agencyNo = #{agencyNo,jdbcType=INTEGER} </if>
      <if test="affiliateSerial != null">AND AT.tid = #{affiliateSerial,jdbcType=VARCHAR} </if>
      <if test="affiliateType != null">AND affiliateType = #{affiliateType,jdbcType=VARCHAR} </if>
      <if test="recommenderNo != null">AND recommenderNo = #{recommenderNo,jdbcType=INTEGER} </if>
      <if test="greenPointAccStatus != null"> AND greenPointAccStatus = #{greenPointAccStatus,jdbcType=INTEGER} </if>
      <if test="redPointAccStatus != null"> AND redPointAccStatus = #{redPointAccStatus,jdbcType=INTEGER} </if>
      <if test="greenPointUseStatus != null"> AND greenPointUseStatus = #{greenPointUseStatus,jdbcType=INTEGER} </if>
      <if test="redPointUseStatus != null"> AND redPointUseStatus = #{redPointUseStatus,jdbcType=INTEGER} </if>
      <if test="affiliateStatus != null and affiliateStatus !=  '0'  and affiliateStatus !=  0">AND affiliateStatus = #{affiliateStatus,jdbcType=VARCHAR} </if>
      <if test="regType != null">AND regType = #{regType,jdbcType=CHAR} </if>
      <if test="regAdminNo != null">AND regAdminNo = #{regAdminNo,jdbcType=INTEGER} </if>

      <if test="paymentRouterType != null"> AND (SELECT paymentRouterType from payment_router WHERE paymentRouterNo = APR.paymentRouterNo) = #{paymentRouterType,jdbcType=VARCHAR} </if>
      <if test="paymentRouterName != null"> AND (SELECT paymentRouterName from payment_router WHERE paymentRouterNo = APR.paymentRouterNo) = #{paymentRouterName,jdbcType=VARCHAR} </if>
      <if test="paymentRouterCode != null"> AND (SELECT paymentRouterCode from payment_router WHERE paymentRouterNo = APR.paymentRouterNo) = #{paymentRouterCode,jdbcType=VARCHAR} </if>
      
       <if test="affiliateCode != null or affiliateAddress != null or affiliateTel != null or affiliatePhone != null or affiliateName != null  or affiliateEmail != null or memberName != null or memberPhone != null ">
      	AND ( 1 = 2 
      </if>
       <if test="memberName != null"> OR M.memberName  LIKE CONCAT('%',#{memberName},'%')</if>
       <if test="memberPhone != null"> OR M.memberPhone  LIKE CONCAT('%',#{memberPhone},'%')</if>
       <if test="affiliateCode != null"> OR affiliateCode  LIKE CONCAT('%',#{affiliateCode},'%')</if>
      <if test="affiliateAddress != null"> OR affiliateAddress  LIKE CONCAT('%',#{affiliateAddress},'%')</if>
      <if test="affiliateEmail != null"> OR affiliateEmail  LIKE CONCAT('%',#{affiliateEmail},'%')</if>
      <if test="affiliateTel != null"> OR affiliateTel  LIKE CONCAT('%',#{affiliateTel},'%')</if>
      <if test="affiliatePhone != null">OR affiliatePhone  LIKE CONCAT('%',#{affiliatePhone},'%') </if>
      <if test="affiliateName != null">OR affiliateName  LIKE CONCAT('%',#{affiliateName},'%')</if>
    <if test="affiliateCode != null or affiliateAddress != null or affiliateTel != null or affiliatePhone != null or affiliateName != null  or affiliateEmail != null or memberName != null or memberPhone != null ">
      	)
      </if>
		
	</select> 
	
		<!-- Affiliate Category 가져오기  -->
	<select id="selectAffiliateCategories" parameterType="HashMap" resultType="HashMap">
		SELECT *
		FROM category
		WHERE 1 = 1
		 <if test="parentCategoryNo != null "> AND parentCategoryNo= #{parentCategoryNo} </if>
		 order by categoryOrder ASC
	</select>

		<!-- 카테고리 가맹점 리스트  -->
	<select id="findAffiliatesByCate" parameterType="HashMap" resultType="HashMap">
			SELECT 
			A.*, 
		    C.affiliateCategoryNo,
		    C.category1No,
		    C.category2No,
		    (select categoryName from category where categoryNo  = C.category1No) as category1Name,
		    (select categoryName from category where categoryNo  = C.category2No) as category2Name,
			AT.affiliateTag
		from affiliate as A
		inner join affiliate_category as C on (A.affiliateNo = C.affiliateNo)
		left outer join affiliate_tag as AT on (A.affiliateNo = AT.affiliateNo)
		WHERE 1 = 1
		 <if test="category1No != null "> AND C.category1No= #{category1No} </if>
		 <if test="category2No != null "> AND C.category2No= #{category2No} </if>
		 <if test="pagination"> limit ${offset} ,  ${pageSize} </if>
	</select>
	
	<!-- PointCode summary-->
	<select id="selectPointCodeSummary" parameterType="HashMap" resultType="HashMap">
		select 
		(select ifnull(sum(accPointAmount),0) from point_code_transaction where memberNo =${memberNo} ) as totalAccPoint,
		(select count(pointCode) from point_code_issue where memberNo = ${memberNo} and useStatus = '1' ) as usableCount,
		(select count(pointCode) from point_code_issue where memberNo = ${memberNo} and useStatus = '3' ) as completeCount
	</select>

	<select id="selectPointCodeIssueRequests" parameterType="HashMap" resultType="HashMap">
		select * from point_code_issue_request where memberNo = ${memberNo}
 	</select>
 	
 	<select id="selectPointCodeIssues" parameterType="HashMap" resultType="HashMap">
		select A.*, B.issueType,B.depositAmount, C.affiliateName
		from point_code_issue as A
		inner join point_code_issue_request as B on (A.pointCodeIssueRequestNo = B.pointCodeIssueRequestNo) 
		left outer join affiliate as C on (B.AffiliateNo = C.affiliateNo)
		where A.memberNo = ${memberNo} and A.useStatus = ${useStatus}
 	</select>

 	<select id="selectReceipt" parameterType="HashMap" resultType="HashMap">
		select 
		A.*, 
		B.affiliateName
		from point_code_issue_request A
		left outer join affiliate as B on (A.affiliateNo= B.affiliateNo)
		where A.memberNo = ${memberNo} and pointCodeIssueRequestNo = ${pointCodeIssueRequestNo}
 	</select>

 	<update id="checkDepositRequest" parameterType="HashMap" >
		update point_code_issue_request set status= '2' where pointCodeIssueRequestNo = ${pointCodeIssueRequestNo}
 	</update>
 	
 	<select id="selectPaymentRouter" parameterType="HashMap" resultType="HashMap">
		select * from payment_router 
		where 1 =1 
		<if test="paymentRouterNo != null "> AND paymentRouterNo   = #{paymentRouterNo} </if>
		<if test="paymentRouterType != null "> AND paymentRouterType   = #{paymentRouterType} </if>
		<if test="paymentRouterName != null "> AND paymentRouterName   = #{paymentRouterName} </if>
 	</select>

 <insert id="insertPointCodeIssueRequest" parameterType="HashMap" useGeneratedKeys = "true" keyProperty = "pointCodeIssueRequestNo">	
  insert into point_code_issue_request (memberNo, 
      issueType,  depositor, payAmount, 
      accPointRate, accPointAmount, accTargetRange, 
      depositAmount, depositRate, 
      uploadFile, depositBankAccount, status, 
      publisher, 
      affiliateNo,
      createTime, updateTime)
    values (#{memberNo,jdbcType=INTEGER}, 
      #{issueType,jdbcType=VARCHAR},  #{depositor,jdbcType=VARCHAR}, #{payAmount,jdbcType=INTEGER}, 
      #{accPointRate,jdbcType=REAL}, #{accPointAmount,jdbcType=REAL}, #{accTargetRange,jdbcType=VARCHAR}, 
      #{depositAmount,jdbcType=REAL}, #{depositRate,jdbcType=REAL}, 
      #{uploadFile,jdbcType=VARCHAR}, #{depositBankAccount,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{publisher,jdbcType=VARCHAR}, 
      #{affiliateNo,jdbcType=INTEGER}, 
      NOW(), NOW())
		
    <selectKey keyProperty="insertPointCodeIssueRequest" resultType="java.lang.Integer" order ="AFTER">
		    SELECT LAST_INSERT_ID()
	 </selectKey>	
	</insert>
	
	<update id="updatePointCodeIssueRequest" parameterType="HashMap" >
		UPDATE point_code_issue_request
		<set>
			<if test="memberNo !=null and memberNo !='' ">
				memberNo=#{memberNo},
			</if>
			<if test="issueType !=null and issueType !='' ">
				issueType=#{issueType},
			</if>
			<if test="issueStatus !=null and issueStatus !='' ">
				issueStatus=#{issueStatus},
			</if>
			<if test="payAmount !=null and payAmount !='' ">
				payAmount=#{payAmount},
			</if>
			<if test="accPointRate !=null and accPointRate !='' ">
				accPointRate=#{accPointRate},
			</if>
			<if test="accPointAmount !=null and accPointAmount !='' ">
				accPointAmount=#{accPointAmount},
			</if>
			
			<if test="accTargetRange !=null and accTargetRange !='' ">
				accTargetRange=#{accTargetRange},
			</if>
			
			<if test="depositAmount !=null and depositAmount !='' ">
				depositAmount=#{depositAmount},
			</if>
			
			<if test="depositRate !=null and depositRate !='' ">
				depositRate=#{depositRate},
			</if>
			
			<if test="uploadFile !=null and uploadFile !='' ">
				uploadFile=#{uploadFile},
			
			</if><if test="status !=null and status !='' ">
				status=#{status},
			</if>
			
			<if test="publisher !=null and publisher !='' ">
				publisher=#{publisher},
			</if>
				updateTime=NOW()
		</set>
		<where>
			AND pointCodeIssueRequestNo= #{pointCodeIssueRequestNo}
		</where>		 
	</update>
	
	<select id="selectAffiliates" parameterType="HashMap" resultType="HashMap">
		select * from affiliate 
		where 1 =1 
		<if test="affiliateNo != null "> AND affiliateNo   = #{affiliateNo} </if>
		<if test="affiliateSerial != null "> AND affiliateSerial   = #{affiliateSerial} </if>
		<choose>
		   	<when test="order !=null">
				order by ${order} 
			</when>
			<otherwise>
				order by createTime desc
			</otherwise>
		</choose>
		
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
 		</select>
	
</mapper>